from typing import *
from math import factorial as f
from __future__ import annotations


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Algorithms:
    # BFS Elimination, 50% | 99% memory efficiency
    @staticmethod
    def orangesRotting(grid: List[List[int]]) -> int:
        fresh = []
        rotten = []
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    fresh.append((i,j))
                if grid[i][j] == 2:
                    rotten.append((i,j))
        if not fresh:
            return 0
        time = 0
        while fresh:
            pops = {}
            for i in range(len(rotten)):
                for j in range(len(fresh)):
                    if (abs(rotten[i][0]-fresh[j][0]) + abs(rotten[i][1]-fresh[j][1])) <= 1.1:
                        pops[j] = 0
            if not pops and fresh:
                return -1
            rotten += [fresh[i] for i in range(len(fresh)) if i in pops]
            fresh = [fresh[i] for i in range(len(fresh)) if i not in pops]
            time += 1            
        return time


    @staticmethod
    def recu(root):  # minimumDepthOfBinaryTree
        if not root:
            return float('inf')
        if not root.left and not root.right:  
            return 1
        return min(1 + Algorithms.recu(root.left), 1 + Algorithms.recu(root.right))